openapi: 3.0.3
info:
  title: CitizenVoice API
  version: 1.0.0
  description: Documentation of API endpoints for CitizenVoice
paths:
  /api/answers/:
    get:
      operationId: answers_list
      description: Answer ViewSet used internally to query data from database.
      tags:
      - answers
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Answer'
          description: ''
    post:
      operationId: answers_create
      description: Answer ViewSet used internally to query data from database.
      tags:
      - answers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Answer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Answer'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
          description: ''
  /api/answers/{id}/:
    get:
      operationId: answers_retrieve
      description: Answer ViewSet used internally to query data from database.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this answer.
        required: true
      tags:
      - answers
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
          description: ''
    put:
      operationId: answers_update
      description: Answer ViewSet used internally to query data from database.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this answer.
        required: true
      tags:
      - answers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Answer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Answer'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
          description: ''
    patch:
      operationId: answers_partial_update
      description: Answer ViewSet used internally to query data from database.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this answer.
        required: true
      tags:
      - answers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAnswer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAnswer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAnswer'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
          description: ''
    delete:
      operationId: answers_destroy
      description: Answer ViewSet used internally to query data from database.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this answer.
        required: true
      tags:
      - answers
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/auth/email/resend/:
    post:
      operationId: auth_email_resend_create
      description: Resend email verification to the passed email (if it exists and
        is not verified already).
      tags:
      - email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          multipart/form-data:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailResendVerificationView'
          description: ''
  /api/auth/email/verify/:
    post:
      operationId: auth_email_verify_create
      description: Verify email address using random key sent in confirmation email.
      tags:
      - email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          multipart/form-data:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailIsVerified'
          description: ''
        '404':
          description: Invalid confrimation key.
  /api/auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Check the credentials from the request data and return a session token.

        Similar to knox's `LoginView` but uses allauth authentication backend instead of
        another API authentication method (basic/session auth).
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllauthLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AllauthLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AllauthLogin'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
  /api/auth/logout/:
    post:
      operationId: auth_logout_create
      description: Delete the session token associated with the incoming authenticated
        request.
      tags:
      - auth
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/auth/logout/all/:
    post:
      operationId: auth_logout_all_create
      description: Delete all session tokens associated with the authenticated user.
      tags:
      - auth
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/auth/me/:
    get:
      operationId: auth_me_retrieve
      description: ViewSet for retrieving and updating current user instance.
      tags:
      - auth
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: auth_me_update
      description: ViewSet for retrieving and updating current user instance.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: auth_me_partial_update
      description: ViewSet for retrieving and updating current user instance.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/auth/register/:
    post:
      operationId: auth_register_create
      description: Register a new user using provided credentials via allauth.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllauthRegister'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AllauthRegister'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AllauthRegister'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          description: No response body
  /api/csrf/:
    get:
      operationId: csrf_retrieve
      tags:
      - csrf
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/linestringlocations/:
    get:
      operationId: linestringlocations_list
      description: LineStringLocation ViewSet used internally to query data from database
        for all users.
      tags:
      - linestringlocations
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LineStringLocation'
          description: ''
    post:
      operationId: linestringlocations_create
      description: LineStringLocation ViewSet used internally to query data from database
        for all users.
      tags:
      - linestringlocations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LineStringLocation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LineStringLocation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LineStringLocation'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineStringLocation'
          description: ''
  /api/linestringlocations/{id}/:
    get:
      operationId: linestringlocations_retrieve
      description: LineStringLocation ViewSet used internally to query data from database
        for all users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this line string location.
        required: true
      tags:
      - linestringlocations
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineStringLocation'
          description: ''
    put:
      operationId: linestringlocations_update
      description: LineStringLocation ViewSet used internally to query data from database
        for all users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this line string location.
        required: true
      tags:
      - linestringlocations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LineStringLocation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LineStringLocation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LineStringLocation'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineStringLocation'
          description: ''
    patch:
      operationId: linestringlocations_partial_update
      description: LineStringLocation ViewSet used internally to query data from database
        for all users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this line string location.
        required: true
      tags:
      - linestringlocations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLineStringLocation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLineStringLocation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLineStringLocation'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineStringLocation'
          description: ''
    delete:
      operationId: linestringlocations_destroy
      description: LineStringLocation ViewSet used internally to query data from database
        for all users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this line string location.
        required: true
      tags:
      - linestringlocations
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/locations/:
    get:
      operationId: locations_list
      description: Location ViewSet used internally to query data from database for
        all users.
      tags:
      - locations
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
          description: ''
    post:
      operationId: locations_create
      description: Location ViewSet used internally to query data from database for
        all users.
      tags:
      - locations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Location'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Location'
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: ''
  /api/locations/{id}/:
    get:
      operationId: locations_retrieve
      description: Location ViewSet used internally to query data from database for
        all users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this location.
        required: true
      tags:
      - locations
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: ''
    put:
      operationId: locations_update
      description: Location ViewSet used internally to query data from database for
        all users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this location.
        required: true
      tags:
      - locations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Location'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Location'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: ''
    patch:
      operationId: locations_partial_update
      description: Location ViewSet used internally to query data from database for
        all users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this location.
        required: true
      tags:
      - locations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLocation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLocation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLocation'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: ''
    delete:
      operationId: locations_destroy
      description: Location ViewSet used internally to query data from database for
        all users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this location.
        required: true
      tags:
      - locations
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/map_views/:
    get:
      operationId: map_views_list
      description: Question ViewSet used internally to query data from database.
      tags:
      - map_views
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MapView'
          description: ''
    post:
      operationId: map_views_create
      description: Question ViewSet used internally to query data from database.
      tags:
      - map_views
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapView'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MapView'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MapView'
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapView'
          description: ''
  /api/map_views/{id}/:
    get:
      operationId: map_views_retrieve
      description: Question ViewSet used internally to query data from database.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this map view.
        required: true
      tags:
      - map_views
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapView'
          description: ''
    put:
      operationId: map_views_update
      description: Question ViewSet used internally to query data from database.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this map view.
        required: true
      tags:
      - map_views
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MapView'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MapView'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MapView'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapView'
          description: ''
    patch:
      operationId: map_views_partial_update
      description: Question ViewSet used internally to query data from database.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this map view.
        required: true
      tags:
      - map_views
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMapView'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMapView'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMapView'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapView'
          description: ''
    delete:
      operationId: map_views_destroy
      description: Question ViewSet used internally to query data from database.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this map view.
        required: true
      tags:
      - map_views
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/map_views/id_names/:
    get:
      operationId: map_views_id_names_retrieve
      description: Question ViewSet used internally to query data from database.
      tags:
      - map_views
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapView'
          description: ''
  /api/pointlocations/:
    get:
      operationId: pointlocations_list
      description: PointLocation ViewSet used internally to query data from database
        for all users.
      tags:
      - pointlocations
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PointLocation'
          description: ''
    post:
      operationId: pointlocations_create
      description: PointLocation ViewSet used internally to query data from database
        for all users.
      tags:
      - pointlocations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PointLocation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PointLocation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PointLocation'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointLocation'
          description: ''
  /api/pointlocations/{id}/:
    get:
      operationId: pointlocations_retrieve
      description: PointLocation ViewSet used internally to query data from database
        for all users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this point location.
        required: true
      tags:
      - pointlocations
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointLocation'
          description: ''
    put:
      operationId: pointlocations_update
      description: PointLocation ViewSet used internally to query data from database
        for all users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this point location.
        required: true
      tags:
      - pointlocations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PointLocation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PointLocation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PointLocation'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointLocation'
          description: ''
    patch:
      operationId: pointlocations_partial_update
      description: PointLocation ViewSet used internally to query data from database
        for all users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this point location.
        required: true
      tags:
      - pointlocations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPointLocation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPointLocation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPointLocation'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointLocation'
          description: ''
    delete:
      operationId: pointlocations_destroy
      description: PointLocation ViewSet used internally to query data from database
        for all users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this point location.
        required: true
      tags:
      - pointlocations
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/polygonlocations/:
    get:
      operationId: polygonlocations_list
      description: PolygonLocation ViewSet used internally to query data from database
        for all users.
      tags:
      - polygonlocations
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolygonLocation'
          description: ''
    post:
      operationId: polygonlocations_create
      description: PolygonLocation ViewSet used internally to query data from database
        for all users.
      tags:
      - polygonlocations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolygonLocation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PolygonLocation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PolygonLocation'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolygonLocation'
          description: ''
  /api/polygonlocations/{id}/:
    get:
      operationId: polygonlocations_retrieve
      description: PolygonLocation ViewSet used internally to query data from database
        for all users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this polygon location.
        required: true
      tags:
      - polygonlocations
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolygonLocation'
          description: ''
    put:
      operationId: polygonlocations_update
      description: PolygonLocation ViewSet used internally to query data from database
        for all users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this polygon location.
        required: true
      tags:
      - polygonlocations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolygonLocation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PolygonLocation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PolygonLocation'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolygonLocation'
          description: ''
    patch:
      operationId: polygonlocations_partial_update
      description: PolygonLocation ViewSet used internally to query data from database
        for all users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this polygon location.
        required: true
      tags:
      - polygonlocations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPolygonLocation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPolygonLocation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPolygonLocation'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolygonLocation'
          description: ''
    delete:
      operationId: polygonlocations_destroy
      description: PolygonLocation ViewSet used internally to query data from database
        for all users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this polygon location.
        required: true
      tags:
      - polygonlocations
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/questions/:
    get:
      operationId: questions_list
      description: |-
        Question ViewSet used to query data from database.
        The `create` method is overwritten to accept one data object or an array of objects.
      tags:
      - questions
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
          description: ''
    post:
      operationId: questions_create
      description: Here we are overwriting the default create method from the Django
        REST framework to update or create Questions by list or by single instances
      tags:
      - questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Question'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
  /api/questions/{id}/:
    get:
      operationId: questions_retrieve
      description: |-
        Question ViewSet used to query data from database.
        The `create` method is overwritten to accept one data object or an array of objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this question.
        required: true
      tags:
      - questions
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
    put:
      operationId: questions_update
      description: |-
        Question ViewSet used to query data from database.
        The `create` method is overwritten to accept one data object or an array of objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this question.
        required: true
      tags:
      - questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Question'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
    patch:
      operationId: questions_partial_update
      description: |-
        Question ViewSet used to query data from database.
        The `create` method is overwritten to accept one data object or an array of objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this question.
        required: true
      tags:
      - questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedQuestion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedQuestion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedQuestion'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
    delete:
      operationId: questions_destroy
      description: |-
        Question ViewSet used to query data from database.
        The `create` method is overwritten to accept one data object or an array of objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this question.
        required: true
      tags:
      - questions
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/questions/{id}/ordered_questions/:
    get:
      operationId: questions_ordered_questions_retrieve
      description: |-
        Retrieve a list of questions for a given survey, ordered by the 'order' field.
        API url: `/api/questions/{survey_id}/ordered_questions`

        Parameters:
            request (Request): The request object used to make the API call.
            pk = survey_id (int): The primary key of the Survey instance to retrieve questions for.

        Returns:
            Response: A JSON response containing a list of serialized Question instances.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this question.
        required: true
      tags:
      - questions
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
  /api/responses/:
    get:
      operationId: responses_list
      description: Response ViewSet used internally to query data from database.
      tags:
      - responses
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Response'
          description: ''
    post:
      operationId: responses_create
      description: Response ViewSet used internally to query data from database.
      tags:
      - responses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Response'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Response'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Response'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: ''
  /api/responses/{id}/:
    get:
      operationId: responses_retrieve
      description: Response ViewSet used internally to query data from database.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - responses
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: ''
    put:
      operationId: responses_update
      description: Response ViewSet used internally to query data from database.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - responses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Response'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Response'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Response'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: ''
    patch:
      operationId: responses_partial_update
      description: Response ViewSet used internally to query data from database.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - responses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedResponse'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedResponse'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedResponse'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: ''
    delete:
      operationId: responses_destroy
      description: Response ViewSet used internally to query data from database.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - responses
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/responses/{id}/create-response/:
    post:
      operationId: responses_create_response_create
      description: Response ViewSet used internally to query data from database.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - responses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Response'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Response'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Response'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: ''
  /api/responses/submit-response/:
    post:
      operationId: responses_submit_response_create
      description: Response ViewSet used internally to query data from database.
      tags:
      - responses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Response'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Response'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Response'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: ''
  /api/surveys/:
    get:
      operationId: surveys_list
      description: Survey ViewSet used internally to query data from database.
      tags:
      - surveys
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Survey'
          description: ''
    post:
      operationId: surveys_create
      description: Survey ViewSet used internally to query data from database.
      tags:
      - surveys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Survey'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Survey'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Survey'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
          description: ''
  /api/surveys/{id}/:
    get:
      operationId: surveys_retrieve
      description: Survey ViewSet used internally to query data from database.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this survey.
        required: true
      tags:
      - surveys
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
          description: ''
    put:
      operationId: surveys_update
      description: Survey ViewSet used internally to query data from database.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this survey.
        required: true
      tags:
      - surveys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Survey'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Survey'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Survey'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
          description: ''
    patch:
      operationId: surveys_partial_update
      description: Survey ViewSet used internally to query data from database.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this survey.
        required: true
      tags:
      - surveys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSurvey'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSurvey'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSurvey'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
          description: ''
    delete:
      operationId: surveys_destroy
      description: Survey ViewSet used internally to query data from database.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this survey.
        required: true
      tags:
      - surveys
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/surveys/{id}/questions/:
    get:
      operationId: surveys_questions_retrieve
      description: Survey ViewSet used internally to query data from database.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this survey.
        required: true
      tags:
      - surveys
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
          description: ''
  /api/surveys/create-survey/:
    post:
      operationId: surveys_create_survey_create
      description: Survey ViewSet used internally to query data from database.
      tags:
      - surveys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Survey'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Survey'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Survey'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
          description: ''
  /api/surveys/my-surveys/:
    get:
      operationId: surveys_my_surveys_retrieve
      description: Survey ViewSet used internally to query data from database.
      tags:
      - surveys
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
          description: ''
  /api/users/:
    get:
      operationId: users_list
      description: User ViewSet used internally to query data from database for all
        users.
      tags:
      - users
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: users_create
      description: User ViewSet used internally to query data from database for all
        users.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/{id}/:
    get:
      operationId: users_retrieve
      description: User ViewSet used internally to query data from database for all
        users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_update
      description: User ViewSet used internally to query data from database for all
        users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      description: User ViewSet used internally to query data from database for all
        users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      description: User ViewSet used internally to query data from database for all
        users.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    AllauthLogin:
      type: object
      description: |-
        Deserializer for login data using allauth.

        Uses email + password or username + password depending on allauth settings.
        Store authentication user instance in validated data.
        Raise ValidationError if not able to login for any reason.
      properties:
        email:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    AllauthRegister:
      type: object
      description: |-
        Registration serializer using email/username + password via allauth.

        Controlled via allauth's settings.
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 2
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
      - username
    Answer:
      type: object
      description: |-
        Serialises 'response', 'question', 'created', 'updated', 'body'
        fields of the Answer model for the API.
      properties:
        id:
          type: integer
          readOnly: true
        question:
          type: integer
        locations:
          type: integer
        created:
          type: string
          format: date-time
          readOnly: true
          title: Creation date
        updated:
          type: string
          format: date-time
          readOnly: true
          title: Last edited
        body:
          type: string
          title: Answer Body
        response:
          type: string
          format: uri
      required:
      - created
      - id
      - question
      - response
      - updated
    AuthToken:
      type: object
      properties:
        expiry:
          type: string
          format: date-time
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
      required:
      - expiry
      - token
      - user
    EmailIsVerified:
      type: object
      properties:
        detail:
          type: string
          default: E-mail verification is successful.
    EmailResendVerificationView:
      type: object
      properties:
        detail:
          type: string
          default: Verification e-mail sent.
    LineStringLocation:
      type: object
      description: Serialises 'id', 'geom', 'description' fields of the LineStringLocation
        model for the API.
      properties:
        id:
          type: integer
          readOnly: true
        geom:
          type: string
        description:
          type: string
          nullable: true
          maxLength: 100
      required:
      - geom
      - id
    Location:
      type: object
      description: |-
        Serialises 'name', 'question', 'answer', 'points', 'lines', 'polygons'
        fields of the Location model for the API.
      properties:
        id:
          type: integer
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        name:
          type: string
          maxLength: 100
        question:
          type: string
          format: uri
          nullable: true
        points:
          type: array
          items:
            type: string
            format: uri
        lines:
          type: array
          items:
            type: string
            format: uri
        polygons:
          type: array
          items:
            type: string
            format: uri
      required:
      - id
      - url
    MapView:
      type: object
      description: |-
        Serialises 'name', 'map_service_url' and 'options'
        fields of the MapView model for the API.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          default: Delft
          title: Name of the MapView location
          maxLength: 150
        map_service_url:
          type: string
          maxLength: 150
        options:
          type: object
          additionalProperties: {}
          title: Map service specific options
        geometries:
          type: object
          additionalProperties: {}
          nullable: true
          title: Custom geometries for the map view
      required:
      - id
    PatchedAnswer:
      type: object
      description: |-
        Serialises 'response', 'question', 'created', 'updated', 'body'
        fields of the Answer model for the API.
      properties:
        id:
          type: integer
          readOnly: true
        question:
          type: integer
        locations:
          type: integer
        created:
          type: string
          format: date-time
          readOnly: true
          title: Creation date
        updated:
          type: string
          format: date-time
          readOnly: true
          title: Last edited
        body:
          type: string
          title: Answer Body
        response:
          type: string
          format: uri
    PatchedLineStringLocation:
      type: object
      description: Serialises 'id', 'geom', 'description' fields of the LineStringLocation
        model for the API.
      properties:
        id:
          type: integer
          readOnly: true
        geom:
          type: string
        description:
          type: string
          nullable: true
          maxLength: 100
    PatchedLocation:
      type: object
      description: |-
        Serialises 'name', 'question', 'answer', 'points', 'lines', 'polygons'
        fields of the Location model for the API.
      properties:
        id:
          type: integer
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        name:
          type: string
          maxLength: 100
        question:
          type: string
          format: uri
          nullable: true
        points:
          type: array
          items:
            type: string
            format: uri
        lines:
          type: array
          items:
            type: string
            format: uri
        polygons:
          type: array
          items:
            type: string
            format: uri
    PatchedMapView:
      type: object
      description: |-
        Serialises 'name', 'map_service_url' and 'options'
        fields of the MapView model for the API.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          default: Delft
          title: Name of the MapView location
          maxLength: 150
        map_service_url:
          type: string
          maxLength: 150
        options:
          type: object
          additionalProperties: {}
          title: Map service specific options
        geometries:
          type: object
          additionalProperties: {}
          nullable: true
          title: Custom geometries for the map view
    PatchedPointLocation:
      type: object
      description: Serialises 'id', 'name', 'descripton', fields of the PointLocation
        model for the API.
      properties:
        id:
          type: integer
          readOnly: true
        geom:
          type: string
        description:
          type: string
          nullable: true
          maxLength: 100
    PatchedPolygonLocation:
      type: object
      description: Serialises 'id', 'geom', 'descripton', fields of the PolygonLocation
        model for the API.
      properties:
        id:
          type: integer
          readOnly: true
        geom:
          type: string
        description:
          type: string
          nullable: true
          maxLength: 100
    PatchedQuestion:
      type: object
      description: |-
        Serializes 'text', 'order', 'required', 'question_type', 'choices', 'is_geospatial', 'map_view'
        fields of the Question model for the API.
      properties:
        id:
          type: integer
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        text:
          type: string
          title: Text of the Question
        order:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          title: Order of where question is placed
        required:
          type: boolean
          default: true
          title: Question must be filled out
        question_type:
          allOf:
          - $ref: '#/components/schemas/QuestionTypeEnum'
          default: text
          title: Type of question
        choices:
          type: string
          nullable: true
          title: Choices for answers
        survey:
          type: integer
        is_geospatial:
          type: boolean
          default: false
          title: If the question must be answered geospatially or not
        map_view:
          type: string
          format: uri
          nullable: true
    PatchedResponse:
      type: object
      description: |-
        Serializes 'created', 'updated', 'survey', 'interview_uuid', 'respondent'
        fields of the Response model for the API.
      properties:
        created:
          type: string
          format: date-time
          readOnly: true
          title: Date response was submitted
        updated:
          type: string
          format: date-time
          readOnly: true
          title: Last edit
        survey:
          type: integer
        interview_uuid:
          type: string
          format: uuid
          title: Unique ID of interview
        url:
          type: string
          format: uri
          readOnly: true
        respondent:
          type: string
          readOnly: true
    PatchedSurvey:
      type: object
      description: |-
        Serialises 'id', 'name', 'description', 'is_published', 'need_logged_user',
        'editable_answers', 'publish_date', 'expire_date', 'public_url', 'designer'
        fields of the Survey model for the API.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Name of the survey
          maxLength: 150
        description:
          type: string
        is_published:
          type: boolean
          default: false
          title: Survey is visible and accessible to users
        need_logged_user:
          type: boolean
          default: false
          title: Only authenticated users have access to this survey
        editable_answers:
          type: boolean
          default: true
          title: Answers can be edited after submission
        publish_date:
          type: string
          format: date-time
          title: Date that survey was made available
        expire_date:
          type: string
          format: date-time
          title: Expiry date of survey
        public_url:
          type: string
          maxLength: 255
        designer:
          type: string
          format: uri
        url:
          type: string
          format: uri
          readOnly: true
    PatchedUser:
      type: object
      description: User serializer for retrieving and update.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
    PointLocation:
      type: object
      description: Serialises 'id', 'name', 'descripton', fields of the PointLocation
        model for the API.
      properties:
        id:
          type: integer
          readOnly: true
        geom:
          type: string
        description:
          type: string
          nullable: true
          maxLength: 100
      required:
      - geom
      - id
    PolygonLocation:
      type: object
      description: Serialises 'id', 'geom', 'descripton', fields of the PolygonLocation
        model for the API.
      properties:
        id:
          type: integer
          readOnly: true
        geom:
          type: string
        description:
          type: string
          nullable: true
          maxLength: 100
      required:
      - geom
      - id
    Question:
      type: object
      description: |-
        Serializes 'text', 'order', 'required', 'question_type', 'choices', 'is_geospatial', 'map_view'
        fields of the Question model for the API.
      properties:
        id:
          type: integer
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        text:
          type: string
          title: Text of the Question
        order:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          title: Order of where question is placed
        required:
          type: boolean
          default: true
          title: Question must be filled out
        question_type:
          allOf:
          - $ref: '#/components/schemas/QuestionTypeEnum'
          default: text
          title: Type of question
        choices:
          type: string
          nullable: true
          title: Choices for answers
        survey:
          type: integer
        is_geospatial:
          type: boolean
          default: false
          title: If the question must be answered geospatially or not
        map_view:
          type: string
          format: uri
          nullable: true
      required:
      - id
      - order
      - survey
      - text
      - url
    QuestionTypeEnum:
      enum:
      - text
      - short-text
      - radio
      - select
      - select-multiple
      - select_image
      - integer
      - float
      - date
      type: string
      description: |-
        * `text` - text (multiple line)
        * `short-text` - short text (one line)
        * `radio` - radio
        * `select` - select
        * `select-multiple` - Select Multiple
        * `select_image` - Select Image
        * `integer` - integer
        * `float` - float
        * `date` - date
    Response:
      type: object
      description: |-
        Serializes 'created', 'updated', 'survey', 'interview_uuid', 'respondent'
        fields of the Response model for the API.
      properties:
        created:
          type: string
          format: date-time
          readOnly: true
          title: Date response was submitted
        updated:
          type: string
          format: date-time
          readOnly: true
          title: Last edit
        survey:
          type: integer
        interview_uuid:
          type: string
          format: uuid
          title: Unique ID of interview
        url:
          type: string
          format: uri
          readOnly: true
        respondent:
          type: string
          readOnly: true
      required:
      - created
      - respondent
      - survey
      - updated
      - url
    Survey:
      type: object
      description: |-
        Serialises 'id', 'name', 'description', 'is_published', 'need_logged_user',
        'editable_answers', 'publish_date', 'expire_date', 'public_url', 'designer'
        fields of the Survey model for the API.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Name of the survey
          maxLength: 150
        description:
          type: string
        is_published:
          type: boolean
          default: false
          title: Survey is visible and accessible to users
        need_logged_user:
          type: boolean
          default: false
          title: Only authenticated users have access to this survey
        editable_answers:
          type: boolean
          default: true
          title: Answers can be edited after submission
        publish_date:
          type: string
          format: date-time
          title: Date that survey was made available
        expire_date:
          type: string
          format: date-time
          title: Expiry date of survey
        public_url:
          type: string
          maxLength: 255
        designer:
          type: string
          format: uri
        url:
          type: string
          format: uri
          readOnly: true
      required:
      - expire_date
      - id
      - name
      - publish_date
      - url
    User:
      type: object
      description: User serializer for retrieving and update.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
      required:
      - email
      - id
      - username
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
